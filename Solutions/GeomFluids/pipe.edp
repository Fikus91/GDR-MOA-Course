/* Geometric optimization of the shape of a pipe */
load "medit"

/* Border of the initial domain */
border input(t=0.0,1.0){x = 0.0; y = 5.0-t; label = 1;};
border bottom(t=0.0,3.0){x=t; y= 4.0; label=0;};
border llround(t=0.0,0.5*pi){x=3.0+cos(0.5*pi-t); y=3.0+sin(0.5*pi-t); label=0;};
border left(t=0.0,3.0){x=4.0; y=3.0-t; label=0;};
border output(t=0.0,1.0){x=4.0+t; y=0.0; label = 3;};
border right(t=0.0,4.0){x = 5.0; y = t; label = 0;};
border rround(t=0.0,0.5*pi){x = 4.0+cos(t); y = 4.0+sin(t); label = 0;};
border top(t=0.0,4.0){x =4.0-t; y = 5.0; label = 0;};

/* Create, then display initial mesh */
mesh Th = buildmesh( input(10) + bottom(30) + llround(10) + left(30) + output(10)+ right(40) + rround(10) + top(40) );
plot(Th,wait=1,ps="initial mesh"); 

/* Parameters */
real eps = 1.e-6;
real epsstks = 1.e-5;  //penalization parameter
real mu = 0.5;    // viscosity
real pout = 1.0;  // output pressure
real dissip = 0.0;
real obj = 0.0,newobj = 0.0;
mesh Dh;
int nit = 200;
real meshsiz = 0.2;
real alpha = (3.0*meshsiz)^2;
real gmax;
real coef = 0.05;
real coefmax = 0.2;
real coefmin = 0.01;
real step;
real chkvoltri;
real epsvoltri = 1.e-4;
real tol = 0.001;
real tgv = 1.e10;
real vol = 0.0;
real ell = 5.0;
real muel = 0.3846;
real lambdael = 0.5769;
string s; 

/* Input flow */
func real uin() {
    return(4.0*(y-4.0)*(1.0-(y-4.0)));
}

/* Finite element spaces: P2-P1 elements for the resolution of the Stokes problem */
fespace Vh(Th,P2);
fespace Ph(Th,P1);
fespace Vhdc(Th,P1dc);

/* Functions */
Vh ux,uy,vx,vy,gx,gy,ng,uox,uoy;
Ph p,q,chidir;
Vhdc shapegdc;

/* Stokes problem */
problem Stokes([ux,uy,p],[vx,vy,q],solver=Crout) =
  int2d(Th)( 2.0*mu*(dx(ux)*dx(vx) + 0.5*(dy(ux)+dx(uy))*(dy(vx)+dx(vy)) + dy(uy)*dy(vy)) )
  - int2d(Th)( p*(dx(vx)+dy(vy)) )
  + int2d(Th)( q*(dx(ux)+dy(uy)) )
  + int2d(Th)( epsstks*p*q )
  + int1d(Th,3)(-pout*vy)
  + on(1,ux=uin(),uy=0.0)
  + on(0,ux=0.0,uy=0.0);

/* Localization function for nodes to be frozen */
func real locdir() {
  if ( y < 0.02 || x < 0.02 ) return(1.0);
  else return(0.0);
}
chidir = locdir();

/* Tangential derivative */
macro Dt(u) [dx(u)-(dx(u)*N.x+dy(u)*N.y)*N.x,dy(u)-(dx(u)*N.x+dy(u)*N.y)*N.y] // EOM

/* Extension / regularization problem */
problem velext([gx,gy],[vx,vy],solver=Crout) =
    int2d(Th)(muel*(2.0*dx(gx)*dx(vx) + (dx(gy)+dy(gx))*(dx(vy)+dy(vx)) + 2.0*dy(gy)*dy(vy)) + lambdael*(dx(gx)+dy(gy))*(dx(vx)+dy(vy)) + (chidir*tgv)*(gx*vx+gy*vy) )
       + int1d(Th,0)( alpha*(Dt(gx)'*Dt(vx) + Dt(gy)'*Dt(vy)) )
  - int1d(Th,0)( shapegdc*(N.x*vx+N.y*vy) )
  + on(1,3,gx=0.0,gy=0.0);

/* Shape gradient of J */
macro dJ() {
  shapegdc = 2.0*mu*(dx(ux)*dx(ux) + 0.5*(dy(ux)+dx(uy))*(dy(ux)+dx(uy)) + dy(uy)*dy(uy)) - ell;
  velext;
} // EOM

/* Initialization */
Stokes;
plot(Th,[ux,uy],wait=1);

/* Initial value of the objective function */
dissip  = int2d(Th)( 2.0*mu*(dx(ux)*dx(ux) + 0.5*(dy(ux)+dx(uy))*(dy(ux)+dx(uy)) + dy(uy)*dy(uy)) );
vol     = int2d(Th)( 1.0 );
obj     = dissip + ell*vol;

/* Main optimization loop */
for(int n=0; n<nit; n++){
  if ( n % 5 == 0 ) {
    s =  "pipe."+n+".mesh"; 
    savemesh(Th,s);
  }
   
  /* Computation of the shape gradient as a P1 function and size of the time step */
  dJ;
  ng = sqrt(gx*gx+gy*gy);
  gmax = ng[].max;
  step = coef*meshsiz / (eps^2+gmax);
  
  /* Attempt motion of the mesh: if the moved mesh has an almost null or flipped element, restart the operation with a smaller step */
  chkvoltri = checkmovemesh(Th,[x+step*gx,y+step*gy]);
  
  if( chkvoltri < epsvoltri ) {
    cout<<"Iteration "<<n<<" rejected; inverted triangle."<<endl;
    coef *= 0.5;
    continue;
  }
    
  /* Else, effectively move the new mesh */
  Dh = movemesh(Th,[x+step*gx,y+step*gy]);
    
  /* Resolution of the state equation */
  uox = ux;
  uoy = uy;
  Stokes;
  
  /* Evaluation of the new objective function */
  dissip = int2d(Th)( 2.0*mu*(dx(ux)*dx(ux) + 0.5*(dy(ux)+dx(uy))*(dy(ux)+dx(uy)) + dy(uy)*dy(uy)) );
  vol    = int2d(Th)( 1.0 );
  newobj = dissip + ell*vol;
  
  /* Decision */
  if( newobj < obj+tol*abs(obj) || coef <= coefmin ) {
    cout<<"Iteration "<<n<<" accepted; objective: "<<obj<<" ---> "<<newobj<<endl;
    obj   = newobj;
    coef  = min(coefmax,1.02*coef);
    Th    = Dh;
    
    /* Adapt the mesh to the current solution of Stokes' problem */
    Th = adaptmesh(Th,[ux,uy],hmin=0.08,hmax=0.1);
    plot(Th,wait=1,ps="current mesh");
  }
  else {
    cout<<"Iteration "<<n<<" rejected; objective: "<<obj<<" v.s. "<<newobj<<endl;
    coef  = max(coefmin,0.6*coef);
    ux    = uox;
    uy    = uoy;
  }
}

/* Print mesh and solution */
savemesh(Th,"pipe.mesh");
//savesol("pipe.sol",Th,[ux,uy]);