/* Topology optimization of a heat lens */
load "medit"

/* Create mesh */
border left(t=0.0,1.0){ x=-1.0; y=1.0-t; label=1; };
border bot(t=0.0,2.0){ x=-1.0+t; y=0.0; label=0; };
border right(t=0.0,1.0){ x=1.0; y=t; label=2; };
border top(t=0.0,2.0){ x=1.0-t; y=1.0; label=0; };
border leftc(t=0.0,0.4){ x=-0.05; y=0.7-t; label=0; };
border botc(t=0.0,0.1){ x=-0.05+t; y=0.3; label=0; };
border rightc(t=0.0,0.4){ x=0.05; y=0.3+t; label=0; };
border topc(t=0.0,0.1){ x=0.05-t; y=0.7; label=0; };

mesh Th = buildmesh(left(50)+bot(100)+right(50)+top(100)+leftc(20)+botc(5)+rightc(20)+topc(5));
// savemesh(Th,"box.mesh");

/* Finite Element spaces */
fespace Vh(Th,P1);
fespace Vh0(Th,P0);

/* Functions and other parameters */
Vh u,uo,p,v,h,hdisp,ho,hr,hro,g,f1,chiw,chifix;
Vh0 f0,g0,reg=region;
int lint = reg(0.0,0.5);
real gin = -1.0;
real gout = 1.0;
real gamma0 = 1.0;
real gamma1 = 10.0;
real eps = 1.e-6;
real alpha = 0.02;
real meas;
real ell = 10.0;
real beta = 0.01;
real eta = 0.5;
real vol,obj,newobj;
int maxit = 400, kmax = 10;
real step = 0.1;
real gmax;
real tol = 0.02;
real maxstep = 0.5;
real minstep = 0.002;
real k0,k1,a0,a1,a2,b;
real TGV = 1.e10;
string sout;

/* Coefficients for the interpolation profile */
k0 = 2.0*gamma0/(gamma1+gamma0);
k1 = 2.0*gamma1/(gamma1+gamma0);
a0 = 0.0;
a1 = k0;
a2 = -k0 + (1.0-k0)/k1;
b = -1.0 + (1.0-k0)/k1;

/* Characteristic function and measure of the observation area */
chiw = (reg(x,y) == lint);
meas = int2d(Th,lint)(1.0);

/* Characteristic function of the area imposed to be weak material */
func real funfix() {
  real r = 0.3;
  if ( x^2+(y-0.5)^2 < r^2 ) return(1.0);
  else return(0.0);
}
chifix = funfix();

/* Interpolation profile for the conductivity */
macro zeta(t) ( (a2*t^2+a1*t+a0)/(b*t+1.0) ) // EOM
macro zetaprime(t) ( (2*a2*t+a1)/(b*t+1.0) - b*(a2*t^2+a1*t+a0)/((b*t+1.0)*(b*t+1.0)) ) // EOM

// macro zeta(t) ( gamma0 + (gamma1-gamma0)*t^3 ) // EOM
// macro zetaprime(t) ( 3.0*(gamma1-gamma0)*t^2 ) // EOM

/* Approximate Heaviside function */
macro heav(t) ( (tanh(beta*eta) + tanh(beta*(t-eta)) ) / ( tanh(beta*eta) + tanh(beta*(1.0-eta))) ) // EOM
macro heavprime(t) ( (beta*(1.0-tanh(beta*(t-eta))*tanh(beta*(t-eta))) ) / ( tanh(beta*eta) + tanh(beta*(1.0-eta)))  ) // EOM

// macro heav(t) ( 1.0-exp(-beta*t) + exp(-beta)*t ) // EOM
// macro heavprime(t) ( exp(-beta) + beta*exp(-beta*t) ) // EOM

/* Regularization of density */
problem hregul(hr,v) = int2d(Th)(alpha^2*(dx(hr)*dx(v)+dy(hr)*dy(v))+hr*v)
                      - int2d(Th)(h*v);

/* Regularization of shape derivative */
problem sdreg(g,v) = int2d(Th)(alpha^2*(dx(g)*dx(v)+dy(g)*dy(v)) + (1.0+TGV*chifix)*g*v)
                      - int2d(Th)(g0*v);

/* Objective function */
macro J() (1.0/meas * int2d(Th,lint)(gamma0^2*(dx(u)^2))) // EOM

/* Volume function */
macro volume(hr) (int2d(Th)(heav(hr))) // EOM

/* Frechet derivative */
macro dJ() {
  g0 = zetaprime(heav(hr))*heavprime(hr)*(dx(u)*dx(p)+dy(u)*dy(p)) + ell*heavprime(hr);
  sdreg;
} // EOM

/* Truncation / symmetrization of h */
func real symh() {
  if ( x >= 0.0 ) return (h(x,y));
  else return (h(-x,y));
}

macro proj() {
  real maxh = h[].max;
  h = min(1.0,max(h-(1.0+maxh)*chifix,0.0));
  h = symh();
} // EOM

/* Calculation of the flux */
macro flux() {
  f0 = gamma0*dx(u); 
  solve regflux(f1,v) = int2d(Th)(f1*v)
                          - int2d(Th)(f0*v); 
} //EOM

/* State problem */
problem potential(u,v) = int2d(Th)(zeta(heav(hr))*(dx(u)*dx(v)+dy(u)*dy(v)))
                           + int2d(Th)(eps*u*v)
                           - int1d(Th,1)(gin*v)
                           - int1d(Th,2)(gout*v);

/* Adjoint problem */
problem adjoint(p,v) = int2d(Th)(zeta(heav(hr))*(dx(p)*dx(v)+dy(p)*dy(v)))
                           + int2d(Th)(eps*p*v)
                           + int2d(Th,lint)(2.0/meas*gamma0^2*(dx(u)*dx(v)));

/* Initialization: design full of high conductivity */
h = 0.5;
proj;
hregul;
potential;

/* Initial value of the objective function */
vol = volume(hr);
newobj = J + ell*vol;

cout<<"Initial value of the objective function: "<<newobj<<endl;

/* Main loop */
for (int it=0; it<maxit; it++) {
  
  /* Update coefficient of the heaviside projection */
   if ( it >= 50 && it % 10 == 0 && it <= 150 ) {
    beta = beta + 1;
    potential;
    vol = volume(hr);
    newobj = J + ell*vol;
  }

  if ( it == 101 ) tol = 0.001;
  
  obj = newobj;
  ho = h;
  hro = hr;
  uo = u;
  
  /* Calculation of the shape gradient */
  adjoint;
  dJ;
  gmax = max(g[].max,-g[].min);
  
  /* Line search */
  for (int k=0; k<kmax; k++) {
    /* Update of topology */
    h = h - step/(eps+gmax)*g;
    proj;

    /* Calculation of the new objective function */
    hregul;
    potential;
    vol = volume(hr);
    newobj = J + ell*vol;
  
    /* Decision */
    /* Accept iteration */
    if ( newobj < obj + tol*abs(obj) || step <= minstep ) {
      step = min(1.1*step,maxstep);
      break;
    }
    /* Reject iteration */
    else {
      step = max(0.6*step,minstep);
      h = ho;
      hr = hro;
      u = uo;
      newobj = obj;
    }
  }
  
  /* Plot shape and print new objective */
  hdisp = heav(hr);
  plot(Th,hdisp,fill=1);
  flux; 
  // sout = "box."+it+".sol";
  // if ( it % 5 == 0 ) savesol(sout,Th,hdisp);
  // sout = "flux."+it+".sol";
  // if (it % 5 == 0) savesol(sout,Th,f1);

  /* Save density and flux */
  savesol("box.sol",Th,hdisp);
  savesol("flux.sol",Th,f1);
  cout<<"Iteration "<<it<<" Objective : "<<newobj<<endl;
}

