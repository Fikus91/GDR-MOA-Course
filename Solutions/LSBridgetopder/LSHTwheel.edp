/* Shape optimization of a wheel bridge via the Level Set method using topological derivatives */
load "medit"
load "distance"
include "tools.idp"

/* Create mesh */
border left(t=0.0,1.5){ x=-1.0; y=1.5-t; label=0; };
border botgl(t=0.0,0.1){ x=-1.0+t; y=0.0; label=1; };
border botf1(t=0.1,0.95){ x=-1.0+t; y=0.0; label=0; };
border botneu(t=0.95,1.05){ x=-1.0+t; y=0.0; label=3; };
border botf2(t=1.05,1.9){ x=-1.0+t; y=0.0; label=0; };
border botdir(t=1.9,2.0){ x=-1.0+t; y=0.0; label=2; };
border right(t=0.0,1.5){ x=1.0; y=t; label=0; };
border top(t=0.0,2.0){ x=1.0-t; y=1.5; label=0; };

mesh Th = buildmesh(left(50)+botgl(5)+botf1(45)+botneu(5)+botf2(45)+botdir(5)+right(50)+top(100));
// savemesh(Th,"box.mesh");

/* Finite Element spaces */
fespace Vh(Th,P1);
fespace Vh0(Th,P0);

/* Functions and other parameters */
Vh phio,phi,ux,uy,uxo,uyo,vx,vy,v,g,gT,nx,ny;
Vh0 g0,gT0,Achi;
real nt = Th.nt;
real gx = 0.0;
real gy = -1.0;
real mu = 0.3846;
real lambda = 0.5769;
real ers = 1.e-3;
real eps = 1.e-6;
real meshsiz = 0.02;
real alpha = 4.0*meshsiz;
real meas;
real ell = 0.25;
real vol,obj,newobj;
int maxit = 200, kmax = 10;
real step;
real gmax;
real tolsd = 0.005;
real tolder = 1.0;
real tol;
real coef = 1.0;
real maxcoef = 3.0;
real mincoef = 0.1;
int dotopder;
real derfrac = 0.01;
string sout;

/* Internal parameters */
Vh0 fracgT;
real[int] loadAchi(nt);
real[int] triav(6),phiv(3);
Vh phitmp;
Vh0 nx0,ny0,ngrphi;

/* Initialization of the Level Set function */
phio = inils();
distance(Th,phio,phi[]);

/* Regularization of shape derivative */
problem velext(g,v) = int2d(Th)(alpha^2*(dx(g)*dx(v)+dy(g)*dy(v)) + g*v)
                      - int1d(Th,levelset=phi)(g0*v);

/* Objective function */
macro J() (int2d(Th)(Achi*mu*(2.0*dx(ux)*dx(ux) + (dx(uy)+dy(ux))*(dx(uy)+dy(ux))
                              + 2.0*dy(uy)*dy(uy)) + Achi*lambda*(dx(ux)+dy(uy))*(dx(ux)+dy(uy)))) // EOM

/* (Negative) shape gradient */
macro dJ() {
  g0 = mu*(2.0*dx(ux)*dx(ux) + (dx(uy)+dy(ux))*(dx(uy)+dy(ux)) + 2.0*dy(uy)*dy(uy))
       + lambda*(dx(ux)+dy(uy))*(dx(ux)+dy(uy))  - ell;
  velext;
} // EOM

/* Topological derivative */
macro dJT() {
  gT0 = pi*(lambda+2.0*mu)/(2.0*mu*(lambda+mu))*Achi*(4.0*mu*(mu*(2.0*dx(ux)*dx(ux) + (dx(uy)+dy(ux))*(dx(uy)+dy(ux)) + 2.0*dy(uy)*dy(uy)) + lambda*(dx(ux)+dy(uy))*(dx(ux)+dy(uy))) + (lambda-mu)*(2.0*mu+2.0*lambda)*(dx(ux)+dy(uy)*(dx(ux)*dy(uy)) )) - ell;
  gT = gT0; /*solve regtopder(gT,v) = int2d(Th)(eps*(dx(gT)*dx(v)+dy(gT)*dy(v)) + gT*v)
                           - int2d(Th)(gT0*v);*/
} // EOM

/* State problem */
problem elasticity([ux,uy],[vx,vy]) = int2d(Th)(Achi*mu*(2.0*dx(ux)*dx(vx) + (dx(uy)+dy(ux))*(dx(vy)+dy(vx))
                                          + 2.0*dy(uy)*dy(vy)) + Achi*lambda*(dx(ux)+dy(uy))*(dx(vx)+dy(vy)) )
                           - int1d(Th,3)(gx*vx+gy*vy)
                           + on(1,uy=0.0)
                           + on(2,ux=0.0,uy=0.0);

/* Initialization */
volfrac(Achi,phi,ers);
elasticity;

/* Initial value of the objective function */
vol = int2d(Th)(Achi);
newobj = J + ell*vol;

cout<<"Initial value of the objective function: "<<newobj<<endl;

/* Main loop */
for (int it=0; it<maxit; it++) {
  obj = newobj;
  phio = phi;
  uxo = ux;
  uyo = uy;
  
  if ( it == 100 ) tolsd = 0.001;
  
  /* Calculation of the shape or topological gradient */
  dotopder = ( it % 5 == 0 && it <= 50 );
  if ( dotopder ) {
    dJT;
    tol = tolder;
  }
  else {
    dJ;
    gmax = max(g[].max,-g[].min);
    tol = tolsd;
  }
  
  /* Normal vector field to the shape */
  normalvec(phi);
  nx = g*nx;
  ny = g*ny;
  
  /* Line search */
  for (int k=0; k<kmax; k++) {
    /* Calculation of step: maximum amplitude of motion = meshsiz*coef */
    step = coef*meshsiz / (eps^2+gmax);
    
    /* Update of the shape: perform either a step of shape or topological derivative */
    if ( dotopder ) {
      perTopDer(phio,phi,gT,derfrac);
    }
    else {
      advectRedist(phio,phi,nx,ny,step);
    }
    symmshape(phi);
    
    /* Calculation of the new objective function */
    volfrac(Achi,phi,ers);
    elasticity;
    vol = int2d(Th)(Achi);
    newobj = J + ell*vol;
    
    /* Decision */
    /* Accept iteration */
    if ( newobj < obj + tol*abs(obj) || coef <= mincoef ) {
      if ( !dotopder ) coef = min(1.1*coef,maxcoef);
      break;
    }
    /* Reject iteration */
    else {
      if ( dotopder ) derfrac *= 0.5;
      else coef = max(0.6*coef,mincoef);
      phi = phio;
      ux = uxo;
      uy = uyo;
      newobj = obj;
    }
  }
  
  /* Save shape and print new objective */
  sout = "box."+(it+1)+".sol";
  savesol(sout,Th,phi);
  
  savesol("box.sol",Th,phi);
  cout<<"Iteration "<<it<<" Objective : "<<newobj<<endl;
}
